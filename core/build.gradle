plugins {
    id 'kotlin-multiplatform'
    id 'org.ajoberstar.grgit' version '3.0.0'
}

repositories {
    maven {
        url "https://dl.bintray.com/krzema1212/it.krzeminski"
    }
}

kotlin {
    jvm {
    }
    js {
        browser()
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
            kotlin.srcDirs += "${buildDir}/generated/"
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
                implementation 'it.krzeminski:PlotAssert:0.1.0-beta'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

task generateGitInfo() {
    def fileDirectory = "${buildDir}/generated/it/krzeminski/fsynth/generated"
    def fileName = "GitInfo.kt"

    def sha1 = grgit.head().id
    def timeUnixTimestamp = grgit.head().dateTime.toEpochSecond()
    def containsUncommittedChanges = !grgit.status().clean
    def contents = """\
        package it.krzeminski.fsynth.generated

        import it.krzeminski.gitinfo.types.CommitMetadata
        import it.krzeminski.gitinfo.types.GitInfo

        val gitInfo = GitInfo(
                latestCommit = CommitMetadata(
                        sha1 = "$sha1",
                        timeUnixTimestamp = $timeUnixTimestamp),
                containsUncommittedChanges = $containsUncommittedChanges)
        """.stripIndent()
    doLast {
        file(fileDirectory).mkdirs()
        file("$fileDirectory/$fileName").text = contents
    }
}

// There's no easy way to express that 'generateGitInfo' task needs to be executed before any code is compiled.
// That's why a dependency on this task is added to all known tasks that deal with compiling code, so that this file
// already exists when code for any platform is about to be compiled.
compileKotlinJs.dependsOn generateGitInfo
compileKotlinJvm.dependsOn generateGitInfo
compileKotlinMetadata.dependsOn generateGitInfo
